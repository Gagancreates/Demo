rules:
  - name: "Inter Entity Ordering"
    description: "Order transactions by Leg Type"
    condition: "legType in ['BUY', 'SELL', 'HOLD']"
    actions:
      - "System.out.println('Ordering by Leg Type')"

  - name: "Inter Ordering"
    description: "Validate Source Name and Direction"
    condition: "sourceName in ['EXCHANGE', 'BROKER'] && direction in ['IN', 'OUT']"
    actions:
      - "System.out.println('Ordering by Weightage Matrix')"

  - name: "Asset Ordering"
    description: "Order transactions by Timestamp"
    condition: "timestamp != null"
    actions:
      - "System.out.println('Ordering by Timestamp')"


import java.time.LocalDateTime;

public class TransactionRequest {
    private String entity;
    private String legType;
    private String timestamp;
    private String sourceName;
    private String direction;

    // Getters and Setters
    public String getEntity() { return entity; }
    public void setEntity(String entity) { this.entity = entity; }

    public String getLegType() { return legType; }
    public void setLegType(String legType) { this.legType = legType; }

    public String getTimestamp() { return timestamp; }
    public void setTimestamp(String timestamp) { this.timestamp = timestamp; }

    public String getSourceName() { return sourceName; }
    public void setSourceName(String sourceName) { this.sourceName = sourceName; }

    public String getDirection() { return direction; }
    public void setDirection(String direction) { this.direction = direction; }
}


import com.google.cloud.bigtable.hbase.BigtableConfiguration;
import org.apache.beam.sdk.Pipeline;
import org.apache.beam.sdk.io.gcp.bigtable.BigtableIO;
import org.apache.beam.sdk.options.PipelineOptionsFactory;
import org.apache.beam.sdk.transforms.*;
import org.apache.beam.sdk.values.PCollection;
import org.jeasy.rules.api.*;
import org.jeasy.rules.core.DefaultRulesEngine;
import java.io.IOException;
import java.util.Comparator;
import java.util.List;

public class TransactionRuleEngine {
    public static void main(String[] args) throws Exception {
        // Load Rules from YAML
        Rules rules = RuleLoader.loadRulesFromYAML("rules.yml");
        RulesEngine rulesEngine = new DefaultRulesEngine();

        // Apache Beam Pipeline
        Pipeline pipeline = Pipeline.create(PipelineOptionsFactory.create());

        PCollection<TransactionRequest> input = pipeline.apply("Read Transactions", /* Read from Kafka/GCS/etc. */);

        // Apply Ordering Logic
        PCollection<TransactionRequest> orderedTransactions = input
            .apply("Apply Ordering", ParDo.of(new DoFn<TransactionRequest, TransactionRequest>() {
                @ProcessElement
                public void processElement(@Element TransactionRequest request, OutputReceiver<TransactionRequest> out) throws IOException {
                    Facts facts = new Facts();
                    facts.put("entity", request.getEntity());
                    facts.put("legType", request.getLegType());
                    facts.put("timestamp", request.getTimestamp());
                    facts.put("sourceName", request.getSourceName());
                    facts.put("direction", request.getDirection());

                    // Fetch old transactions from Bigtable
                    int oldTransactionCount = fetchOldTransactions(request);
                    facts.put("oldTransactionCount", oldTransactionCount);

                    // Apply Rules
                    rulesEngine.fire(rules, facts);
                    out.output(request);
                }
            }));

        // Sorting by Levels
        PCollection<TransactionRequest> sortedTransactions = orderedTransactions
            .apply("Sort Transactions", MapElements.into(TypeDescriptors.lists(TypeDescriptor.of(TransactionRequest.class)))
                .via((List<TransactionRequest> transactions) -> {
                    transactions.sort(Comparator.comparing(TransactionRequest::getLegType)  // Inter Entity
                            .thenComparing(TransactionRequest::getSourceName)           // Inter Ordering
                            .thenComparing(TransactionRequest::getTimestamp));          // Asset Ordering
                    return transactions;
                }));

        pipeline.run().waitUntilFinish();
    }

    private static int fetchOldTransactions(TransactionRequest request) throws IOException {
        // Initialize Bigtable Connection
        String projectId = "your-project-id";
        String instanceId = "your-instance-id";
        String tableName = "transactions";

        try (com.google.cloud.bigtable.hbase.BigtableConnection connection =
                     BigtableConfiguration.connect(projectId, instanceId)) {
            org.apache.hadoop.hbase.client.Table table = connection.getTable(org.apache.hadoop.hbase.TableName.valueOf(tableName));

            // Query for similar transactions
            org.apache.hadoop.hbase.client.Scan scan = new org.apache.hadoop.hbase.client.Scan();
            scan.setStartRow(request.getEntity().getBytes());
            scan.setStopRow(request.getEntity().getBytes());

            org.apache.hadoop.hbase.client.ResultScanner scanner = table.getScanner(scan);
            int count = 0;
            for (org.apache.hadoop.hbase.client.Result result : scanner) {
                count++;
            }
            return count;
        }
    }
}
