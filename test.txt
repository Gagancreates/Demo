import com.google.cloud.bigtable.data.v2.BigtableDataClient;
import com.google.cloud.bigtable.data.v2.models.*;
import java.io.IOException;
import java.time.Instant;
import java.util.*;

class PaymentEvent {
    private final String entity;
    private final String bic;
    private final String legType;
    private final Instant timestamp;
    private int sequence;

    public PaymentEvent(String entity, String bic, String legType, Instant timestamp) {
        this.entity = entity;
        this.bic = bic;
        this.legType = legType;
        this.timestamp = timestamp;
    }

    public String getEntity() { return entity; }
    public String getLegType() { return legType; }
    public Instant getTimestamp() { return timestamp; }
    public int getSequence() { return sequence; }
    public void setSequence(int sequence) { this.sequence = sequence; }

    @Override
    public String toString() {
        return String.format("Entity: %s, BIC: %s, LegType: %s, Timestamp: %s, Sequence: %d",
                entity, bic, legType, timestamp, sequence);
    }
}

class BigtableEventSequencer {
    private static final String PROJECT_ID = "your-project-id";
    private static final String INSTANCE_ID = "your-instance-id";
    private static final String TABLE_NAME = "your-table-name";

    private static final Map<String, Integer> LEG_ORDER = Map.of(
            "Instructing", 1,
            "Intermediary", 2,
            "Beneficiary", 3
    );

    private final BigtableDataClient dataClient;

    public BigtableEventSequencer() throws IOException {
        this.dataClient = BigtableDataClient.create(PROJECT_ID, INSTANCE_ID);
    }

    public void processEvent(PaymentEvent event) {
        int legPriority = LEG_ORDER.getOrDefault(event.getLegType(), 4);
        int newSequence = getNextSequence(event.getEntity(), legPriority, event.getTimestamp());
        
        event.setSequence(newSequence);
        storeEvent(event);
        
        System.out.println(event);
    }

    private int getNextSequence(String entity, int legPriority, Instant eventTime) {
        Query query = Query.create(TABLE_NAME).prefix(entity).limit(1).orderByTimestampDesc();
        int lastSequence = 1;
        Instant lastTimestamp = Instant.EPOCH;

        for (Row row : dataClient.readRows(query)) {
            RowCell cell = row.getCells().get(0);
            lastTimestamp = Instant.ofEpochMilli(cell.getTimestamp() / 1000);
            lastSequence = Integer.parseInt(cell.getValue().toStringUtf8());
            break;
        }

        // Assign sequence dynamically without modifying past events
        if (eventTime.isBefore(lastTimestamp)) {
            return lastSequence - 10; // Assign a lower sequence (leaving a gap)
        } else {
            return lastSequence + 10; // Assign a higher sequence (leaving a gap)
        }
    }

    private void storeEvent(PaymentEvent event) {
        Mutation mutation = Mutation.create().setCell("event_data", "sequence", event.getSequence());
        dataClient.mutateRow(RowMutation.create(TABLE_NAME, event.getEntity()).addMutation(mutation));
    }
}

public class OptimizedRealTimeSequencer {
    public static void main(String[] args) throws IOException {
        BigtableEventSequencer sequencer = new BigtableEventSequencer();

        // Simulating unordered event arrivals
        sequencer.processEvent(new PaymentEvent("HBUS", "BIC1", "Intermediary", Instant.parse("2025-02-10T10:00:00Z")));
        sequencer.processEvent(new PaymentEvent("HBUK", "BIC2", "Instructing", Instant.parse("2025-02-10T09:00:00Z")));
        sequencer.processEvent(new PaymentEvent("HBFR", "BIC3", "Beneficiary", Instant.parse("2025-02-10T11:30:00Z")));
        sequencer.processEvent(new PaymentEvent("HBLO", "BIC4", "Intermediary", Instant.parse("2025-02-10T09:30:00Z"))); // Earlier event
    }
}
