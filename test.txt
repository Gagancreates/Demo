import com.google.cloud.storage.BlobId;
import com.google.cloud.storage.BlobInfo;
import com.google.cloud.storage.Storage;
import com.google.cloud.storage.StorageOptions;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.FSDataOutputStream;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.parquet.example.data.Group;
import org.apache.parquet.example.data.simple.SimpleGroupFactory;
import org.apache.parquet.hadoop.ParquetWriter;
import org.apache.parquet.hadoop.example.ExampleParquetWriter;
import org.apache.parquet.schema.MessageType;
import org.apache.parquet.schema.MessageTypeParser;

import java.io.ByteArrayOutputStream;
import java.io.IOException;

public class ParquetWriteToGCS {
    public static void main(String[] args) throws IOException {
        // Define schema
        String schemaStr = "message example { " +
                "required binary name (UTF8); " +
                "required int32 age; " +
                "optional binary city (UTF8); " +
                "}";
        MessageType schema = MessageTypeParser.parseMessageType(schemaStr);
        SimpleGroupFactory groupFactory = new SimpleGroupFactory(schema);

        // Write to a local temporary file
        Configuration conf = new Configuration();
        Path tempParquetPath = new Path("temp_example.parquet");

        try (ParquetWriter<Group> writer = ExampleParquetWriter.builder(tempParquetPath)
                .withConf(conf)
                .withType(schema)
                .build()) {

            // Example data rows
            Group row1 = groupFactory.newGroup()
                    .append("name", "Alice")
                    .append("age", 30)
                    .append("city", "New York");

            Group row2 = groupFactory.newGroup()
                    .append("name", "Bob")
                    .append("age", 25)
                    .append("city", "Los Angeles");

            // Write rows
            writer.write(row1);
            writer.write(row2);

            System.out.println("Temporary Parquet file written: " + tempParquetPath);
        }

        // Upload to GCS
        String bucketName = "your-bucket-name";
        String objectName = "example.parquet";

        Storage storage = StorageOptions.getDefaultInstance().getService();
        BlobId blobId = BlobId.of(bucketName, objectName);
        BlobInfo blobInfo = BlobInfo.newBuilder(blobId).build();

        try (FileSystem fs = FileSystem.get(conf);
             FSDataOutputStream tempFileOutputStream = fs.create(tempParquetPath);
             ByteArrayOutputStream outputStream = new ByteArrayOutputStream()) {

            fs.copyToLocalFile(tempParquetPath, new Path("local_example.parquet"));
            storage.create(blobInfo, outputStream.toByteArray());

            System.out.println("File uploaded to GCS: gs://" + bucketName + "/" + objectName);
        }
    }
}

